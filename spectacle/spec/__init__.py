#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0.1'
__CHEETAH_versionTuple__ = (2, 0, 1, 'final', 0)
__CHEETAH_genTime__ = 1260710506.277775
__CHEETAH_genTimestamp__ = 'Sun Dec 13 05:21:46 2009'
__CHEETAH_src__ = 'spec.tmpl'
__CHEETAH_srcLastModified__ = 'Sun Dec 13 05:21:44 2009'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class spec(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        Template.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''# 
# Do not Edit! Generated by:
# spectacle version 0.1
# 

Name:       ''')
        _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Name",True) # '${metadata.Name}' on line 6, col 13
        if _v is not None: write(_filter(_v, rawExpr='${metadata.Name}')) # from line 6, col 13.
        write('''
Summary:    ''')
        _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Summary",True) # '${metadata.Summary}' on line 7, col 13
        if _v is not None: write(_filter(_v, rawExpr='${metadata.Summary}')) # from line 7, col 13.
        write('''
Version:    ''')
        _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Version",True) # '${metadata.Version}' on line 8, col 13
        if _v is not None: write(_filter(_v, rawExpr='${metadata.Version}')) # from line 8, col 13.
        write('''
Group:      ''')
        _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Group",True) # '${metadata.Group}' on line 9, col 13
        if _v is not None: write(_filter(_v, rawExpr='${metadata.Group}')) # from line 9, col 13.
        write('''
License:    ''')
        _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.License",True) # '${metadata.License}' on line 10, col 13
        if _v is not None: write(_filter(_v, rawExpr='${metadata.License}')) # from line 10, col 13.
        write('''
URL:        ''')
        _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.URL",True) # '${metadata.URL}' on line 11, col 13
        if _v is not None: write(_filter(_v, rawExpr='${metadata.URL}')) # from line 11, col 13.
        write('''
Release:    ''')
        _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Release",True) # '${metadata.Release}' on line 12, col 13
        if _v is not None: write(_filter(_v, rawExpr='${metadata.Release}')) # from line 12, col 13.
        write('''%{?dist}
''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("BuildArch"): # generated from line 13, col 1
            write('''BuildArch: ''')
            _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.BuildArch",True) # '${metadata.BuildArch}' on line 14, col 12
            if _v is not None: write(_filter(_v, rawExpr='${metadata.BuildArch}')) # from line 14, col 12.
            write('''
''')
        #  Sources
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("Sources"): # generated from line 17, col 1
            idx = 0
            for source in VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Sources",True): # generated from line 19, col 1
                write('''Source''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"idx",True) # '${idx}' on line 20, col 7
                if _v is not None: write(_filter(_v, rawExpr='${idx}')) # from line 20, col 7.
                write(''':  ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"source",True) # '$source' on line 20, col 16
                if _v is not None: write(_filter(_v, rawExpr='$source')) # from line 20, col 16.
                write('''
''')
                idx = VFSL([locals()]+SL+[globals(), __builtin__],"idx",True) + 1
        #  Patches
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("Patches"): # generated from line 25, col 1
            idx = 0
            for patch in VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Patches",True): # generated from line 27, col 1
                write('''Patch''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"idx",True) # '${idx}' on line 28, col 6
                if _v is not None: write(_filter(_v, rawExpr='${idx}')) # from line 28, col 6.
                write(''':    ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"patch",True) # '$patch' on line 28, col 17
                if _v is not None: write(_filter(_v, rawExpr='$patch')) # from line 28, col 17.
                write('''
''')
                idx = VFSL([locals()]+SL+[globals(), __builtin__],"idx",True) + 1
        #  Requires
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("Requires"): # generated from line 33, col 1
            for req in VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Requires",True): # generated from line 34, col 1
                write('''Requires:   ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"req",True) # '$req' on line 35, col 13
                if _v is not None: write(_filter(_v, rawExpr='$req')) # from line 35, col 13.
                write('''
''')
        #  Requires(post) etc.
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra",True),"has_key",False)("Info") and VFSL([locals()]+SL+[globals(), __builtin__],"extra.Info",True): # generated from line 39, col 1
            write('''Requires(post):  /sbin/install-info
Requires(postun):  /sbin/install-info
''')
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Service",True): # generated from line 43, col 1
            write('''Requires(post):  /sbin/service
Requires(post):  /sbin/chkconfig
Requires(postun): /sbin/service
Requires(postun): /sbin/chkconfig
''')
        #  BuildRequires
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("PkgConfigBR"): # generated from line 50, col 1
            for br in VFSL([locals()]+SL+[globals(), __builtin__],"metadata.PkgConfigBR",True): # generated from line 51, col 1
                write('''BuildRequires:  pkgconfig(''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"br",True) # '$br' on line 52, col 27
                if _v is not None: write(_filter(_v, rawExpr='$br')) # from line 52, col 27.
                write(''')
''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("PkgBR"): # generated from line 55, col 1
            for br in VFSL([locals()]+SL+[globals(), __builtin__],"metadata.PkgBR",True): # generated from line 56, col 1
                write('''BuildRequires:  ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"br",True) # '$br' on line 57, col 17
                if _v is not None: write(_filter(_v, rawExpr='$br')) # from line 57, col 17.
                write('''
''')
        write('''
BuildRoot:  %{_tmppath}/%{name}-%{version}-build

%description
''')
        _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Description",True) # '${metadata.Description}' on line 64, col 1
        if _v is not None: write(_filter(_v, rawExpr='${metadata.Description}')) # from line 64, col 1.
        write('''

''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("AutoSubPackages"): # generated from line 66, col 1
            for sp in VFSL([locals()]+SL+[globals(), __builtin__],"metadata.AutoSubPackages",True): # generated from line 67, col 1
                write('''%package ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"sp",True) # '$sp' on line 68, col 10
                if _v is not None: write(_filter(_v, rawExpr='$sp')) # from line 68, col 10.
                write('''
Summary: Development files for %{name}
Group: Development/Libraries
Requires: %{name} = %{version}-%{version}
%description ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"sp",True) # '$sp' on line 72, col 14
                if _v is not None: write(_filter(_v, rawExpr='$sp')) # from line 72, col 14.
                write('''
Development files for %{name}

''')
        write('''
''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("SubPackages"): # generated from line 78, col 1
            for sp in VFSL([locals()]+SL+[globals(), __builtin__],"metadata.SubPackages",True): # generated from line 79, col 1
                write('''%package ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"sp.Name",True) # '$sp.Name' on line 80, col 10
                if _v is not None: write(_filter(_v, rawExpr='$sp.Name')) # from line 80, col 10.
                write('''
Summary: ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"sp.Summary",True) # '$sp.Summary' on line 81, col 10
                if _v is not None: write(_filter(_v, rawExpr='$sp.Summary')) # from line 81, col 10.
                write('''
''')
                if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"sp",True),"has_key",False)("Group"): # generated from line 82, col 1
                    write('''Group: ''')
                    _v = VFSL([locals()]+SL+[globals(), __builtin__],"sp.Group",True) # '$sp.Group' on line 83, col 8
                    if _v is not None: write(_filter(_v, rawExpr='$sp.Group')) # from line 83, col 8.
                    write('''
''')
                else: # generated from line 84, col 1
                    write('''Group: ''')
                    _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Group",True) # '${metadata.Group}' on line 85, col 8
                    if _v is not None: write(_filter(_v, rawExpr='${metadata.Group}')) # from line 85, col 8.
                    write('''
''')
                if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"sp",True),"has_key",False)("Requires"): # generated from line 87, col 1
                    for req in VFSL([locals()]+SL+[globals(), __builtin__],"sp.Requires",True): # generated from line 88, col 1
                        write('''Requires: ''')
                        _v = VFSL([locals()]+SL+[globals(), __builtin__],"req",True) # '$req' on line 89, col 11
                        if _v is not None: write(_filter(_v, rawExpr='$req')) # from line 89, col 11.
                        write('''
''')
                write('''Requires: %{name} = %{version}-%{version}
''')
            write('''%description ''')
            _v = VFSL([locals()]+SL+[globals(), __builtin__],"sp.Name",True) # '$sp.Name' on line 94, col 14
            if _v is not None: write(_filter(_v, rawExpr='$sp.Name')) # from line 94, col 14.
            write('''
''')
            _v = VFSL([locals()]+SL+[globals(), __builtin__],"sp.Description",True) # '$sp.Description' on line 95, col 1
            if _v is not None: write(_filter(_v, rawExpr='$sp.Description')) # from line 95, col 1.
            write('''
''')
        write('''
%prep
%setup -q -n %{name}-%{version}
''')
        #  Patches
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("Patches"): # generated from line 101, col 1
            idx = 0
            for patch in VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Patches",True): # generated from line 103, col 1
                write('''%patch''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"idx",True) # '${idx}' on line 104, col 7
                if _v is not None: write(_filter(_v, rawExpr='${idx}')) # from line 104, col 7.
                write(''' -p1
''')
                idx = VFSL([locals()]+SL+[globals(), __builtin__],"idx",True) + 1
        write('''
%build
# >> build pre
''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra.content",True),"has_key",False)("build") and VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra.content.build",True),"has_key",False)("pre"): # generated from line 111, col 1
            for l in VFSL([locals()]+SL+[globals(), __builtin__],"extra.content.build.pre",True): # generated from line 112, col 1
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"l",True) # '$l' on line 113, col 1
                if _v is not None: write(_filter(_v, rawExpr='$l')) # from line 113, col 1.
                write('''
''')
        write('''# << build pre
''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)('Configure'): # generated from line 117, col 1
            if VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Configure",True) == 'autogen': # generated from line 118, col 1
                write('''%autogen --disable-static''')
            elif VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Configure",True) == 'reconfigure': # generated from line 120, col 1
                write('''%reconfigure --disable-static''')
            elif VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Configure",True) == 'python': # generated from line 122, col 1
                write('''python setup.py build
''')
        else: # generated from line 125, col 1
            write('''%configure --disable-static''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("ConfigOptions"): # generated from line 128, col 1
            write(''' \\\n''')
            length = len(VFSL([locals()]+SL+[globals(), __builtin__],"metadata.ConfigOptions",True))
            idx = 1
            for opt in VFSL([locals()]+SL+[globals(), __builtin__],"metadata.ConfigOptions",True): # generated from line 132, col 1
                write('''    --''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"opt",True) # '$opt' on line 133, col 7
                if _v is not None: write(_filter(_v, rawExpr='$opt')) # from line 133, col 7.
                if VFSL([locals()]+SL+[globals(), __builtin__],"idx",True) == VFSL([locals()]+SL+[globals(), __builtin__],"length",True): # generated from line 134, col 1
                    write('''
''')
                else: # generated from line 136, col 1
                    write(''' \\\n''')
                idx = VFSL([locals()]+SL+[globals(), __builtin__],"idx",True) + 1
        else: # generated from line 141, col 1
            write('''
''')
        write('''
''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)('Configure') and VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Configure",True) == 'python': # generated from line 145, col 1
            write('''# Call make
''')
        else: # generated from line 147, col 1
            write('''make %{?_smp_mflags}
''')
        write('''
# >> build post
''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra.content",True),"has_key",False)("build") and  VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra.content.build",True),"has_key",False)("post"): # generated from line 152, col 1
            for l in VFSL([locals()]+SL+[globals(), __builtin__],"extra.content.build.post",True): # generated from line 153, col 1
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"l",True) # '$l' on line 154, col 1
                if _v is not None: write(_filter(_v, rawExpr='$l')) # from line 154, col 1.
                write('''
''')
        write('''# << build post

%install
# >> install pre
''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra.content",True),"has_key",False)("install") and  VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra.content.install",True),"has_key",False)("pre"): # generated from line 161, col 1
            for l in VFSL([locals()]+SL+[globals(), __builtin__],"extra.content.install.pre",True): # generated from line 162, col 1
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"l",True) # '$l' on line 163, col 1
                if _v is not None: write(_filter(_v, rawExpr='$l')) # from line 163, col 1.
                write('''
''')
        write('''# << install pre
rm -rf %{buildroot}
''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)('Configure') and VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Configure",True) == 'python': # generated from line 168, col 1
            write('''%{__python} setup.py install --skip-build --root %{buildroot}
''')
        else: # generated from line 170, col 1
            write('''%make_install
''')
        write('''
# >> install post
''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra.content",True),"has_key",False)("install") and VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra.content.install",True),"has_key",False)("post"): # generated from line 175, col 1
            for l in VFSL([locals()]+SL+[globals(), __builtin__],"extra.content.install.post",True): # generated from line 176, col 1
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"l",True) # '$l' on line 177, col 1
                if _v is not None: write(_filter(_v, rawExpr='$l')) # from line 177, col 1.
                write('''
''')
        write('''# << install post

''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("LocaleName"): # generated from line 182, col 1
            write('''%find_lang ''')
            _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.LocaleName",True) # '${metadata.LocaleName}' on line 183, col 12
            if _v is not None: write(_filter(_v, rawExpr='${metadata.LocaleName}')) # from line 183, col 12.
            write('''
''')
        write('''
%clean
rm -rf %{buildroot}
''')
        #  Pre
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Schema",True): # generated from line 189, col 1
            write('''%pre
if [ "$1" -gt 1 ]; then
''')
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Schema",True): # generated from line 193, col 1
            for schema in VFSL([locals()]+SL+[globals(), __builtin__],"extra.Schemas",True): # generated from line 194, col 1
                write('''  export GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source`
  gconftool-2 --makefile-uninstall-rule \\\n    ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"schema",True) # '$schema' on line 197, col 5
                if _v is not None: write(_filter(_v, rawExpr='$schema')) # from line 197, col 5.
                write(''' \\\n    > /dev/null || :
''')
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Schema",True): # generated from line 201, col 1
            write('''fi
''')
        #  PreUn
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Schema",True): # generated from line 205, col 1
            write('''%preun
if [ "$1" -gt 1 ]; then
''')
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Schema",True): # generated from line 209, col 1
            for schema in VFSL([locals()]+SL+[globals(), __builtin__],"extra.Schemas",True): # generated from line 210, col 1
                write('''  export GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source`
  gconftool-2 --makefile-uninstall-rule \\\n    ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"schema",True) # '$schema' on line 213, col 5
                if _v is not None: write(_filter(_v, rawExpr='$schema')) # from line 213, col 5.
                write(''' \\\n    > /dev/null || :
''')
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Schema",True): # generated from line 217, col 1
            write('''fi
''')
        #  Post
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Info",True) or VFSL([locals()]+SL+[globals(), __builtin__],"extra.Lib",True) or VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)('PostScripts'): # generated from line 221, col 1
            write('''%post
''')
        #  -ldconfog
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Lib",True): # generated from line 225, col 1
            write('''/sbin/ldconfig
''')
        #  -Schema
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Schema",True): # generated from line 229, col 1
            for schema in VFSL([locals()]+SL+[globals(), __builtin__],"extra.Schemas",True): # generated from line 230, col 1
                write('''export GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source`
gconftool-2 --makefile-install-rule \\\n    ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"schema",True) # '$schema' on line 233, col 5
                if _v is not None: write(_filter(_v, rawExpr='$schema')) # from line 233, col 5.
                write('''  > /dev/null || :
''')
        #  -Extra Post Script
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)('PostScripts'): # generated from line 237, col 1
            _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.PostScripts",True) # '$metadata.PostScripts' on line 238, col 1
            if _v is not None: write(_filter(_v, rawExpr='$metadata.PostScripts')) # from line 238, col 1.
            write('''
''')
        #  -Info
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Info",True): # generated from line 241, col 1
            for inf in VFSL([locals()]+SL+[globals(), __builtin__],"extra.Infos",True): # generated from line 242, col 1
                write('''%install_info ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"inf",True) # '$inf' on line 243, col 15
                if _v is not None: write(_filter(_v, rawExpr='$inf')) # from line 243, col 15.
                write(''' /usr/share/info/dir
''')
        write('''
''')
        #  PostUn
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Info",True) or VFSL([locals()]+SL+[globals(), __builtin__],"extra.Lib",True): # generated from line 248, col 1
            write('''%postun
''')
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Lib",True): # generated from line 251, col 1
            write('''/sbin/ldconfig
''')
        if VFSL([locals()]+SL+[globals(), __builtin__],"extra.Info",True): # generated from line 254, col 1
            for inf in VFSL([locals()]+SL+[globals(), __builtin__],"extra.Infos",True): # generated from line 255, col 1
                write('''%install_info_delete ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"inf",True) # '$inf' on line 256, col 22
                if _v is not None: write(_filter(_v, rawExpr='$inf')) # from line 256, col 22.
                write(''' /usr/share/info/dir
''')
        write('''
''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("LocaleName"): # generated from line 260, col 1
            write('''%files -f ''')
            _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.LocaleName",True) # '${metadata.LocaleName}' on line 261, col 11
            if _v is not None: write(_filter(_v, rawExpr='${metadata.LocaleName}')) # from line 261, col 11.
            write('''.lang
''')
        else : # generated from line 262, col 1
            write('''%files 
''')
        write('''%defattr(-,root,root,-)
# >> files 
''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra.content",True),"has_key",False)("files") and VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra.content.files",True),"has_key",False)("main"): # generated from line 267, col 1
            for l in VFSL([locals()]+SL+[globals(), __builtin__],"extra.content.files.main",True): # generated from line 268, col 1
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"l",True) # '$l' on line 269, col 1
                if _v is not None: write(_filter(_v, rawExpr='$l')) # from line 269, col 1.
                write('''
''')
        write('''# << files 

''')
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("AutoSubPackages"): # generated from line 274, col 1
            for sp in VFSL([locals()]+SL+[globals(), __builtin__],"metadata.AutoSubPackages",True): # generated from line 275, col 1
                write('''%files ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"sp",True) # '$sp' on line 276, col 8
                if _v is not None: write(_filter(_v, rawExpr='$sp')) # from line 276, col 8.
                write('''
%defattr(-,root,root,-)
# >> files ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"sp",True) # '$sp' on line 278, col 12
                if _v is not None: write(_filter(_v, rawExpr='$sp')) # from line 278, col 12.
                write('''
''')
                if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra.content",True),"has_key",False)("files") and VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra.content.files",True),"has_key",False)(VFSL([locals()]+SL+[globals(), __builtin__],"sp",True)): # generated from line 279, col 1
                    for l in VFN(VFSL([locals()]+SL+[globals(), __builtin__],"extra.content",True),"files",True)[VFSL([locals()]+SL+[globals(), __builtin__],"sp",True)]: # generated from line 280, col 1
                        _v = VFSL([locals()]+SL+[globals(), __builtin__],"l",True) # '$l' on line 281, col 1
                        if _v is not None: write(_filter(_v, rawExpr='$l')) # from line 281, col 1.
                        write('''
''')
                write('''# << files ''')
                _v = VFSL([locals()]+SL+[globals(), __builtin__],"sp",True) # '$sp' on line 284, col 12
                if _v is not None: write(_filter(_v, rawExpr='$sp')) # from line 284, col 12.
                write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_spec= 'respond'

## END CLASS DEFINITION

if not hasattr(spec, '_initCheetahAttributes'):
    templateAPIClass = getattr(spec, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(spec)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=spec()).run()


