# ##############################################
# Do not Edit! Generated by:
# spectacle version 0.1
# ###############################################

Name:       ${metadata.Name}
Summary:    ${metadata.Summary}
Version:    ${metadata.Version}
Group:      ${metadata.Group}
License:    ${metadata.License}
URL:        ${metadata.URL}
Release:    ${metadata.Release}%{?dist}
#if $metadata.has_key("BuildArch")
BuildArch: ${metadata.BuildArch}
#end if
## Sources
#if $metadata.has_key("Sources")
#set $idx = 0
#for $source in $metadata.Sources
Source${idx}:  $source
#set $idx = $idx + 1
#end for
#end if
## Patches
#if $metadata.has_key("Patches")
#set $idx = 0
#for $patch in $metadata.Patches
Patch${idx}:    $patch
#set $idx = $idx + 1
#end for
#end if
## Requires
#if $metadata.has_key("Requires")
#for $req in $metadata.Requires
Requires:   $req
#end for
#end if
## Requires(post) etc.
#if $extra.has_key("Info") and $extra.Info
Requires(post):  /sbin/install-info
Requires(postun):  /sbin/install-info
#end if
#if $extra.Service
Requires(post):  /sbin/service
Requires(post):  /sbin/chkconfig
Requires(postun): /sbin/service
Requires(postun): /sbin/chkconfig
#end if
## BuildRequires
#if $metadata.has_key("PkgConfigBR")
#for $br in $metadata.PkgConfigBR
BuildRequires:  pkgconfig($br)
#end for
#end if
#if $metadata.has_key("PkgBR")
#for $br in $metadata.PkgBR
BuildRequires:  $br
#end for
#end if

BuildRoot:  %{_tmppath}/%{name}-%{version}-build

%description
${metadata.Description}

#if $metadata.has_key("AutoSubPackages")
#for $sp in $metadata.AutoSubPackages
%package $sp
Summary: Development files for %{name}
Group: Development/Libraries
Requires: %{name} = %{version}-%{release}
%description $sp
Development files for %{name}

#end for
#end if

#if $metadata.has_key("SubPackages")
#for $sp in $metadata.SubPackages
%package $sp.Name
Summary: $sp.Summary
#if $sp.has_key("Group")
Group: $sp.Group
#else
Group: ${metadata.Group}
#end if
#if $sp.has_key("Requires")
#for $req in $sp.Requires
Requires: $req
#end for
#end if
Requires: %{name} = %{version}-%{release}
%description $sp.Name
$sp.Description

#end for
#end if

%prep
%setup -q -n %{name}-%{version}
## Patches
#if $metadata.has_key("Patches")
#set $idx = 0
#for $patch in $metadata.Patches
%patch${idx} -p1
#set $idx = $idx + 1
#end for
#end if

%build
# >> build pre
#if $extra.content.has_key("build") and $extra.content.build.has_key("pre")
#for $l in $extra.content.build.pre
$l
#end for
#end if
# << build pre
#if $metadata.has_key('Configure')
#if $metadata.Configure == 'autogen'
%autogen --disable-static#slurp
#else if $metadata.Configure == 'configure'
%configure --disable-static#slurp
#else if $metadata.Configure == 'reconfigure'
%reconfigure --disable-static#slurp
#else if $metadata.Configure == 'python'
python setup.py build
#end if
#else
%configure --disable-static#slurp
#end if
#if $metadata.has_key("ConfigOptions")
 \
#set $length = len($metadata.ConfigOptions)
#set $idx = 1
#for $opt in $metadata.ConfigOptions
    $opt#slurp
#if $idx == $length

#else
 \
#end if
#set $idx = $idx + 1
#end for
#else

#end if

#if $metadata.has_key('Configure') and $metadata.Configure == 'python'
# Call make
#else
make %{?_smp_mflags}
#end if

# >> build post
#if $extra.content.has_key("build") and  $extra.content.build.has_key("post")
#for $l in $extra.content.build.post
$l
#end for
#end if
# << build post

%install
# >> install pre
#if $extra.content.has_key("install") and  $extra.content.install.has_key("pre")
#for $l in $extra.content.install.pre
$l
#end for
#end if
# << install pre
rm -rf %{buildroot}
#if $metadata.has_key('Configure') and $metadata.Configure == 'python'
%{__python} setup.py install --skip-build --root %{buildroot}
#else
%make_install
#end if

# >> install post
#if $extra.content.has_key("install") and $extra.content.install.has_key("post")
#for $l in $extra.content.install.post
$l
#end for
#end if
# << install post

#if $metadata.has_key("LocaleName")
%find_lang ${metadata.LocaleName}
#end if

%clean
rm -rf %{buildroot}
## Pre
#if $extra.Schema
%pre
if [ "$1" -gt 1 ]; then
#end if
#if $extra.Schema
#for $schema in $extra.Schemas
  export GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source`
  gconftool-2 --makefile-uninstall-rule \
    $schema \
    > /dev/null || :
#end for
#end if
#if $extra.Schema
fi
#end if
## PreUn
#if $extra.Schema
%preun
if [ "$1" -gt 1 ]; then
#end if
#if $extra.Schema
#for $schema in $extra.Schemas
  export GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source`
  gconftool-2 --makefile-uninstall-rule \
    $schema \
    > /dev/null || :
#end for
#end if
#if $extra.Schema
fi
#end if
## Post
#if $extra.Info or $extra.Lib or $metadata.has_key('PostScripts')
%post
#end if
## -ldconfog
#if $extra.Lib
/sbin/ldconfig
#end if
## -Schema
#if $extra.Schema
#for $schema in $extra.Schemas
export GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source`
gconftool-2 --makefile-install-rule \
    $schema  > /dev/null || :
#end for
#end if
## -Extra Post Script
#if $metadata.has_key('PostScripts')
$metadata.PostScripts
#end if
## -Info
#if $extra.Info
#for $inf in $extra.Infos
%install_info $inf /usr/share/info/dir
#end for
#end if

## PostUn
#if $extra.Info or $extra.Lib
%postun
#end if
#if $extra.Lib
/sbin/ldconfig
#end if
#if $extra.Info
#for $inf in $extra.Infos
%install_info_delete $inf /usr/share/info/dir
#end for
#end if

#if $metadata.has_key("LocaleName")
%files -f ${metadata.LocaleName}.lang
#else 
%files 
#end if
%defattr(-,root,root,-)
# >> files 
#if $extra.content.has_key("files") and $extra.content.files.has_key("main")
#for $l in $extra.content.files.main
$l
#end for
#end if
# << files 

#if $metadata.has_key("AutoSubPackages")
#for $sp in $metadata.AutoSubPackages
%files $sp
%defattr(-,root,root,-)
# >> files $sp
#if $extra.content.has_key("files") and $extra.content.files.has_key($sp)
#for $l in $extra.content.files[$sp]
$l
#end for
#end if
# << files $sp
#end for

#end if
