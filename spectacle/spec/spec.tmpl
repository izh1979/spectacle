# ##############################################
# Do not Edit! Generated by:
# spectacle version ${metadata.MyVersion}
# ###############################################
#set $str_newline = '\n'
# >> macros 
#if $extra.content.has_key("macros") and $extra.content.macros.has_key("main")
$str_newline.join($extra.content.macros.main)
#end if
# << macros 

#if $metadata.has_key('Configure') and $metadata.Configure == 'python'
%{!?python_sitearch: %define python_sitearch %(%{__python} -c "from distutils.sysconfig import get_python_lib; print get_python_lib(1)")}
#end if

Name:       ${metadata.Name}
Summary:    ${metadata.Summary}
Version:    ${metadata.Version}
Group:      ${metadata.Group}
License:    ${metadata.License}
URL:        ${metadata.URL}
Release:    ${metadata.Release}%{?dist}
#if $metadata.has_key("BuildArch")
BuildArch: ${metadata.BuildArch}
#end if
## Sources
#if $metadata.has_key("Sources")
#set $idx = 0
#for $source in $metadata.Sources
Source${idx}:    $source
#set $idx = $idx + 1
#end for
#end if
## Patches
#if $metadata.has_key("Patches")
#set $idx = 0
#for $patch in $metadata.Patches
Patch${idx}:     $patch
#set $idx = $idx + 1
#end for
#end if
## Requires
#if $metadata.has_key("Requires")
#for $req in $metadata.Requires
Requires:   $req
#end for
#end if
## Requires(post) etc.
#if $extra.has_key("Icon") and $extra.Icon
Requires(post):  /bin/touch
#end if
#if $extra.has_key("Info") and $extra.Info
Requires(post):  /sbin/install-info
Requires(postun):  /sbin/install-info
#end if
#if $extra.Service
Requires(post):  /sbin/service
Requires(post):  /sbin/chkconfig
Requires(postun): /sbin/service
Requires(postun): /sbin/chkconfig
#end if
## BuildRequires
#if $metadata.has_key("PkgConfigBR")
#for $br in $metadata.PkgConfigBR
#set $br_comps = $br.split()
#if $len($br_comps) > 1
BuildRequires:  pkgconfig($br_comps[0])$br[$len($br_comps[0]):]
#else
BuildRequires:  pkgconfig($br_comps[0])
#end if
#end for
#end if
#if $metadata.has_key("PkgBR")
#for $br in $metadata.PkgBR
BuildRequires:  $br
#end for
#end if

BuildRoot:  %{_tmppath}/%{name}-%{version}-build

%description
#if $metadata.has_key("Description")
${metadata.Description}
#else
Description: %{summary}
#end if

#if $metadata.has_key("AutoSubPackages")
#for $sp in $metadata.AutoSubPackages
%package $sp
Summary: Development files for %{name}
Group: Development/Libraries
Requires: %{name} = %{version}-%{release}
%description $sp
Development files for %{name}

#end for
#end if

#if $metadata.has_key("SubPackages")
#for $sp in $metadata.SubPackages
%package $sp.Name
Summary: $sp.Summary
#if $sp.has_key("Group")
Group: $sp.Group
#else
Group: ${metadata.Group}
#end if
#if $sp.has_key("Requires")
#for $req in $sp.Requires
Requires: $req
#end for
#end if
Requires: %{name} = %{version}-%{release}
%description $sp.Name
#if $sp.has_key('Description')
$sp.Description
#else
Description: %{summary}
#end if

#end for
#end if

%prep
%setup -q -n %{name}-%{version}
## Patches
#if $metadata.has_key("Patches")
#set $idx = 0
#for $patch in $metadata.Patches
%patch${idx} -p1
#set $idx = $idx + 1
#end for
#end if

%build
# >> build pre
#if $extra.content.has_key("build") and $extra.content.build.has_key("pre")
$str_newline.join($extra.content.build.pre)
#end if
# << build pre

#if $metadata.has_key('Configure')
#set $Configure = $metadata.Configure
#else
#set $Configure = 'noconfigure'
#end if

#if $Configure == 'python'
%{__python} setup.py build
#else
#if $Configure == 'autogen'
%autogen --disable-static#slurp
#else if $Configure == 'configure'
%configure --disable-static#slurp
#else if $Configure == 'reconfigure'
%reconfigure --disable-static#slurp
#end if
## any other values fall thru to 'noconfigure'
#if $Configure != 'noconfigure' and $metadata.has_key("ConfigOptions")
 \
#set $length = len($metadata.ConfigOptions)
#set $idx = 1
#for $opt in $metadata.ConfigOptions
    $opt#slurp
#if $idx == $length

#else
 \
#end if
#set $idx = $idx + 1
#end for
#end if ## ConfigOptions

# Call make instruction
#if $metadata.has_key('Builder')
#if $metadata.Builder == 'make'
make %{?_smp_mflags}
#else if $metadata.Builder == 'single-make'
make
#else
$metadata.Builder
#end if
#else
make %{?_smp_mflags}
#end if ## has_key Builder

#end if ## == python

# >> build post
#if $extra.content.has_key("build") and  $extra.content.build.has_key("post")
$str_newline.join($extra.content.build.post)
#end if
# << build post

%install
# >> install pre
#if $extra.content.has_key("install") and  $extra.content.install.has_key("pre")
$str_newline.join($extra.content.install.pre)
#end if
# << install pre
rm -rf %{buildroot}
#if $metadata.has_key('Configure') and $metadata.Configure == 'python'
%if 0%{?suse_version}
%{__python} setup.py install --root=%{buildroot} --prefix=%{_prefix} --record-rpm=PY_INSTALLED_FILES
%else
%{__python} setup.py install --root=%{buildroot} -O1 --record=PY_INSTALLED_FILES
%endif
#else
#if $metadata.has_key('Builder') and $metadata.Builder != 'make' and $metadata.Builder != 'single-make'
# Please write install script under ">> install post"
#else
make install DESTDIR=%{buildroot}
#end if
#end if ## of Configure==python

# >> install post
#if $extra.content.has_key("install") and $extra.content.install.has_key("post")
$str_newline.join($extra.content.install.post)
#end if
# << install post

#if $metadata.has_key("LocaleName")
%find_lang ${metadata.LocaleName} || echo -n >> ${metadata.LocaleName}.lang
#end if

mkdir -p %{buildroot}/%{_datadir}/doc/%{name}-%{version}
for f in `ls %{buildroot}/%{_datadir}/doc/`; do
    if [ -f %{buildroot}/%{_datadir}/doc/\$f ]; then
        mv %{buildroot}/%{_datadir}/doc/\$f %{buildroot}/%{_datadir}/doc/%{name}-%{version}
    fi
done

%clean
rm -rf %{buildroot}

## Pre
#if $extra.Schema
%pre
if [ "$1" -gt 1 ]; then
#for $schema in $extra.Schemas
  export GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source`
  gconftool-2 --makefile-uninstall-rule \
    $schema \
    > /dev/null || :
#end for
fi
#end if
## PreUn

#if $extra.Schema
%preun
## TODO: confirm? if [ "$1" -gt 1 ]; then
if [ "$1" -gt 0 ]; then
#for $schema in $extra.Schemas
  export GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source`
  gconftool-2 --makefile-uninstall-rule \
    $schema \
    > /dev/null || :
#end for
fi
#end if

## Post
#if $extra.Info or $extra.Lib or $extra.Schema or $extra.Icon or $metadata.has_key('PostScripts')
%post
## -ldconfog
#if $extra.Lib
/sbin/ldconfig
#end if
## -Schema
#if $extra.Schema
#for $schema in $extra.Schemas
export GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source`
gconftool-2 --makefile-install-rule \
    $schema  > /dev/null || :
#end for
#end if
## -Extra Post Script
#if $metadata.has_key('PostScripts')
$metadata.PostScripts
#end if
## -Info
#if $extra.Info
#for $inf in $extra.Infos
%install_info $inf /usr/share/info/dir
#end for
#end if
## -Icon
#if $extra.Icon
/bin/touch --no-create %{_datadir}/icons/hicolor || :
%{_bindir}/gtk-update-icon-cache \
  --quiet %{_datadir}/icons/hicolor 2> /dev/null|| :
#end if
#end if ## need post

## PostUn
#if $extra.Info or $extra.Lib
%postun
#if $extra.Lib
/sbin/ldconfig
#end if
#if $extra.Info
#for $inf in $extra.Infos
%install_info_delete $inf /usr/share/info/dir
#end for
#end if
#end if ## need postun

## Post for SubPackages
#if $metadata.has_key("SubPackages")
#for $sp in $metadata.SubPackages
#set $sub_extra = $extra.subpkgs[$sp.Name]

#if $sub_extra.Info or $sub_extra.Lib ### TODO  $metadata.has_key('PostScripts')
%post $sp.Name
#end if
## -ldconfog
#if $sub_extra.Lib
/sbin/ldconfig
#end if
## -Schema
#if $sub_extra.Schema
#for $schema in $sub_extra.Schemas
export GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source`
gconftool-2 --makefile-install-rule \
    $schema  > /dev/null || :
#end for
#end if

## -Extra Post Script
### #if $metadata.has_key('PostScripts')
### $metadata.PostScripts
### #end if

## -Info
#if $sub_extra.Info
#for $inf in $sub_extra.Infos
%install_info $inf /usr/share/info/dir
#end for
#end if

#end for ## per subpackage
#end if ## has subpackages

## PostUn for SubPackages
#if $metadata.has_key("SubPackages")
#for $sp in $metadata.SubPackages
#set $sub_extra = $extra.subpkgs[$sp.Name]

#if $sub_extra.Info or $sub_extra.Lib
%postun $sp.Name
#end if
#if $sub_extra.Lib
/sbin/ldconfig
#end if
#if $sub_extra.Info
#for $inf in $sub_extra.Infos
%install_info_delete $inf /usr/share/info/dir
#end for
#end if

#end for ## per subpackage
#end if ## has subpackages

#if $metadata.has_key("LocaleName")
%files -f ${metadata.LocaleName}.lang
#else if $metadata.has_key('Configure') and $metadata.Configure == 'python'
%files -f PY_INSTALLED_FILES
#else
%files
#end if
%defattr(-,root,root,-)
#if $metadata.has_key("Documents")
#for $doc in $metadata.Documents
%doc $doc
#end for
#end if
# >> files 
#if $extra.content.has_key("files") and $extra.content.files.has_key("main")
$str_newline.join($extra.content.files.main)
#end if
# << files 

#if $metadata.has_key("AutoSubPackages")
#for $sp in $metadata.AutoSubPackages
%files $sp
%defattr(-,root,root,-)
# >> files $sp
#if $extra.content.has_key("files") and $extra.content.files.has_key($sp)
$str_newline.join($extra.content.files[$sp])
#end if
# << files $sp

#end for
#end if

#if $metadata.has_key("SubPackages")
#for $sp in $metadata.SubPackages
%files $sp.Name
%defattr(-,root,root,-)
#if $sp.has_key("Documents")
#for $doc in $sp.Documents
%doc $doc
#end for
#end if
# >> files $sp.Name
#if $extra.content.has_key("files") and $extra.content.files.has_key($sp.Name)
$str_newline.join($extra.content.files[$sp.Name])
#end if
# << files $sp.Name

#end for
#end if
