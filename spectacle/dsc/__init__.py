#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
import __builtin__
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.2.2'
__CHEETAH_versionTuple__ = (2, 2, 2, 'final', 0)
__CHEETAH_genTime__ = 1255197778.192667
__CHEETAH_genTimestamp__ = 'Sat Oct 10 14:02:58 2009'
__CHEETAH_src__ = 'dsc.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Oct  9 09:07:38 2009'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class dsc(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(dsc, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''# 
# Do not Edit! Generated by:
# spec-builder version 0.13
# 

Format:     1.0
Source:     ''')
        _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Name",True) # u'${metadata.Name}' on line 7, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${metadata.Name}')) # from line 7, col 13.
        write(u'''
Architecture: any
Version:    ''')
        _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.Version",True) # u'${metadata.Version}' on line 9, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${metadata.Version}')) # from line 9, col 13.
        write(u'''
Homepage:        ''')
        _v = VFSL([locals()]+SL+[globals(), __builtin__],"metadata.URL",True) # u'${metadata.URL}' on line 10, col 18
        if _v is not None: write(_filter(_v, rawExpr=u'${metadata.URL}')) # from line 10, col 18.
        write(u'''
Standards-Version: 3.8.0
Maintainer: packagers@moblin.org
''')
        #  BuildRequires
        if VFN(VFSL([locals()]+SL+[globals(), __builtin__],"metadata",True),"has_key",False)("BuildRequires"): # generated from line 14, col 1
            for brtype in VFSL([locals()]+SL+[globals(), __builtin__],"metadata.BuildRequires",True): # generated from line 15, col 1
                if VFSL([locals()]+SL+[globals(), __builtin__],"brtype",True) == "PkgConfig": # generated from line 16, col 1
                    for br in VFSL([locals()]+SL+[globals(), __builtin__],"metadata.BuildRequires.PkgConfig",True): # generated from line 17, col 1
                        write(u'''Build-Depends:  ''')
                        _v = VFSL([locals()]+SL+[globals(), __builtin__],"br",True) # u'$br' on line 18, col 17
                        if _v is not None: write(_filter(_v, rawExpr=u'$br')) # from line 18, col 17.
                        write(u'''
''')
                if VFSL([locals()]+SL+[globals(), __builtin__],"brtype",True) == "Pkg": # generated from line 21, col 1
                    for br in VFSL([locals()]+SL+[globals(), __builtin__],"metadata.BuildRequires.Pkg",True): # generated from line 22, col 1
                        write(u'''Build-Depends:  ''')
                        _v = VFSL([locals()]+SL+[globals(), __builtin__],"br",True) # u'$br' on line 23, col 17
                        if _v is not None: write(_filter(_v, rawExpr=u'$br')) # from line 23, col 17.
                        write(u'''
''')
        write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_dsc= 'respond'

## END CLASS DEFINITION

if not hasattr(dsc, '_initCheetahAttributes'):
    templateAPIClass = getattr(dsc, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(dsc)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=dsc()).run()


