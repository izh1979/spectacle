#!/usr/bin/python -tt
# vim: ai ts=4 sts=4 et sw=4

#    Copyright (c) 2009 Intel Corporation
#
#    This program is free software; you can redistribute it and/or modify it
#    under the terms of the GNU General Public License as published by the Free
#    Software Foundation; version 2 of the License
#
#    This program is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#    for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc., 59
#    Temple Place - Suite 330, Boston, MA 02111-1307, USA.

import os,sys
import re
import optparse
import distutils.version as _V
import urlgrabber
from HTMLParser import HTMLParser

import spectacle.specify as specify

class Pkg:
    def __init__(self, name, ver, url):
        self.name = name
        self.cur_ver = ver
        self.src_url_raw = url

        self.src_url = self.__replace_macros()

    def __replace_macros(self):
        r_url = self.src_url_raw

        if '%{name}' in r_url:
            r_url = r_url.replace('%{name}', self.name)
        if '%{version}' in r_url:
            r_url = r_url.replace('%{version}', self.cur_ver)

        return r_url

    def upper_url(self):
        import urlparse
        return urlparse.urljoin(self.src_url, './')

    def link_regex(self):
        regex = os.path.basename(self.src_url_raw)
        if '%{name}' in regex:
            regex = regex.replace('%{name}', self.name)
        if '%{version}' in regex:
            regex = regex.replace('%{version}', '(\S+)')

        return regex

    def guess_next_ver(self):
        v = _V.LooseVersion(self.cur_ver)

        changed = False
        v.version.reverse()
        for i, d in enumerate(v.version):
            if isinstance(d, int):
                v.version[i] = d + 1
                changed = True
                break

        if changed:
            v.version.reverse()
            return '.'.join(v.version)
        else:
            return None



class MyHTMLParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.links = []

    def handle_starttag(self, tag, attrs):
        if tag == 'a':
            self.links.append(dict(attrs).get('href'))

def check_scm(scm_url):
    print 'TODO: check git latest tags'
    pass

def check_src(pkg, cur_ver, src_url):

    def _validate_url(url):
        """ try to open the link to verify """
        try:
            f = urlgrabber.urlopen(url)
        except urlgrabber.URLGrabberError, e:
            if e.errno == 14: # HTTPError
                return False
            else:
                raise e

        f.close()
        return True

    if re.search('%{.*}', cur_ver):
        print 'There are macros in version string, please replace them and try again.'
        return

    pkg = Pkg(pkg, cur_ver, src_url)

    guess_dir_link = pkg.upper_url()
    if _validate_url(guess_dir_link):
        parser = MyHTMLParser()
        parser.feed(urlgrabber.urlread(guess_dir_link))
        links = filter(lambda l: pkg.name in l, parser.links)

        regex = re.compile(pkg.link_regex())
        vers = []
        for link in links:
            m = regex.match(os.path.basename(link))
            if m:
                vers.append(_V.LooseVersion(m.group(1)))
        if vers:
            vers.sort()
            if vers[-1] > _V.LooseVersion(pkg.cur_ver):
                return vers[-1]

    # Cannot find newer version
    return None


def parse_options(args):
    import spectacle.__version__

    usage = "Usage: %prog [options] <spec-path>"
    parser = optparse.OptionParser(usage, version=spectacle.__version__.VERSION)

    parser.add_option("-v", "--verbose", action="store_true",
                      dest="verbose", default=False,
                      help="Print verbose messages")
    parser.add_option("-u", "--update-yaml", action="store_true",
                      dest="update_yaml", default=False,
                      help="Update the YAML file when newer version found")
    parser.add_option("-d", "--download", action="store_true",
                      dest="download", default=False,
                      help="Download the source package when newer version found")
    parser.add_option("", "--skip-scm", action="store_true",
                      dest="skip_scm", default=False,
                      help="Skip the checking of SCM links")

    (options, args) = parser.parse_args()
    if not args:
        parser.error('Must specify path of yaml file')
        sys.exit(1)

    return options, args

if __name__ == '__main__':
    """ Main Function """

    (options, args) = parse_options(sys.argv[1:])

    yaml_fpath = args[0]

    # Check if the input file exists
    if not os.path.exists(yaml_fpath):
        # input file does not exist
        print "%s: File does not exist" % yaml_fpath
        sys.exit(1)

    if yaml_fpath.find('/') != -1 and os.path.dirname(yaml_fpath) != os.path.curdir:
        print 'This tool need to be run in package dir, skip %s' % yaml_fpath
        sys.exit(1)

    rpm_writer = specify.RPMWriter(yaml_fpath)
    rpm_writer.parse()

    pkg_name = rpm_writer.pkg
    cur_ver = rpm_writer.version

    if 'SCM' in rpm_writer.metadata:
        scm_url = rpm_writer.metadata['SCM']
    else:
        scm_url = None

    src_url = None
    for src in rpm_writer.metadata['Sources']:
        if re.match('^(http|https|ftp):\/\/.+', src):
            src_url = src
            break # use the 1st valid url

    if not scm_url and not src_url:
        print 'No valid upstream url for source packages, quit'
        sys.exit(1)

    if scm_url:
        if options.skip_scm:
            print 'Skip checking for SCM:', scm_url
        else:
            print 'Checking for SCM tags:', scm_url
            check_scm(scm_url)

    if src_url:
        print 'Checking for released source pkgs at:', src_url
        new_ver = check_src(pkg_name, cur_ver, src_url)

        if new_ver:
            print 'Found newer version:', new_ver
        else:
            print 'No newer version found'

